/* Generated By:JavaCC: Do not edit this line. Formatter.java */
import java.io.*;
import java.util.*;

public class Formatter implements FormatterConstants {
    private static int eol = 0, events = 0;
    private static String eid, rid, name;
    private static String sql = "insert into iblockstat (eid, rid, name, events, count, individual, cumulative, nsec, locked, caller, stack) values(";
    public static void main(String args[]) throws ParseException {
       if (args == null || args.length != 2) {
          System.err.println("Usage: FormatLockstatMinusS" + " EID RID");
          System.exit(1);
       }
       eid = args[0]; rid = args[1];
       Formatter formatter = new Formatter(System.in);
       formatter.output();
    }

  static final public void output() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      eol();
    }
    label_2:
    while (true) {
      type();
      data();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMS:
      case AMB:
      case SLS:
      case TLS:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void type() throws ParseException {
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMS:
      n = jj_consume_token(AMS);
                  name = String.valueOf(n.image);
      rest_of_type();
      eol();
      break;
    case AMB:
      n = jj_consume_token(AMB);
                  name = String.valueOf(n.image);
      rest_of_type();
      eol();
      break;
    case SLS:
      n = jj_consume_token(SLS);
                  name = String.valueOf(n.image);
      rest_of_type();
      eol();
      break;
    case TLS:
      n = jj_consume_token(TLS);
                  name = String.valueOf(n.image);
      rest_of_type();
      eol();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void rest_of_type() throws ParseException {
  Token e;
    e = jj_consume_token(INTEGER);
                  events = Integer.valueOf(e.image);
    jj_consume_token(EVENTS);
    jj_consume_token(FLOAT);
    jj_consume_token(SECONDS);
    jj_consume_token(INTEGER);
    jj_consume_token(EPERS);
  }

  static final public void data() throws ParseException {
  Token count, indv, cuml, nsec, lock, caller, se; String s = "";
    jj_consume_token(DASHES);
    eol();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case H1:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(H1);
      eol();
      count = jj_consume_token(INTEGER);
      indv = jj_consume_token(INTEGER);
      jj_consume_token(PRCNT);
      cuml = jj_consume_token(INTEGER);
      jj_consume_token(PRCNT);
      jj_consume_token(FLOAT);
      nsec = jj_consume_token(INTEGER);
      lock = jj_consume_token(STACKELEM);
      caller = jj_consume_token(STACKELEM);
      eol();
      jj_consume_token(H2);
      eol();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case STACKELEM:
        case EOL:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PIPE:
            jj_consume_token(PIPE);
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
            jj_consume_token(AT);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STACKELEM:
          se = jj_consume_token(STACKELEM);
                                                                   s = s + se + ":";
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        eol();
      }
      jj_consume_token(DASHES);
      eol();
                            System.out.println(sql + eid + ", " + rid + ", " + name + ", " + events + ", " +
                                               count + ", " + indv + ", " + cuml + ", " + nsec + ", '" +
                                               String.valueOf(lock.image).replace('\u005c'', '^') + "', '" +
                                               String.valueOf(caller.image).replace('\u005c'', '^') + "', '" +
                                               s.replace('\u005c'', '^') + "') ;");
                             s = "";
    }
  }

  static final public void eol() throws ParseException {
    label_5:
    while (true) {
      jj_consume_token(EOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
    }
               eol++;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FormatterTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x78,0x78,0x4000,0xd0000,0x1000,0x2000,0x10000,0x40000,0x80000,};
   }

  /** Constructor with InputStream. */
  public Formatter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Formatter(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormatterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Formatter(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormatterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Formatter(FormatterTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FormatterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
