/* Generated By:JavaCC: Do not edit this line. FormatterTokenManager.java */
import java.io.*;
import java.util.*;

/** Token Manager. */
public class FormatterTokenManager implements FormatterConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x78L) != 0L)
            return 80;
         return -1;
      case 1:
         if ((active0 & 0x78L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
            return 80;
         }
         return -1;
      case 2:
         if ((active0 & 0x78L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
            return 80;
         }
         return -1;
      case 3:
         if ((active0 & 0x78L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
            return 80;
         }
         return -1;
      case 4:
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x58L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
            return 80;
         }
         return -1;
      case 5:
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x58L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
            return 80;
         }
         return -1;
      case 6:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 6;
            return 80;
         }
         return -1;
      case 7:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 7;
            return 80;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x18L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x380L);
      case 37:
         return jjStopAtPos(0, 11);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x18L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 124:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(38, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x18L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x280L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x18L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x280L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x2c0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x18L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x280L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x18L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x18L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x280L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x280L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x18L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 47:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x18L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x118L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x20L);
      case 40:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(9, 8);
         break;
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x18L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(10, 7);
         break;
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x18L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x40L);
      case 41:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         break;
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x18L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x18L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa14_0(active0, 0x18L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active0, 0x18L);
      case 58:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(14, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(16, 6);
         break;
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(19, 3);
         break;
      case 107:
         return jjMoveStringLiteralDfa20_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(20, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 91;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 82;
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if (curChar == 32)
                     jjAddStates(3, 4);
                  break;
               case 5:
                  if (curChar == 32)
                     jjAddStates(5, 6);
                  break;
               case 7:
                  if (curChar == 32)
                     jjAddStates(7, 8);
                  break;
               case 9:
                  if (curChar == 32)
                     jjAddStates(9, 10);
                  break;
               case 11:
                  if (curChar == 32)
                     jjAddStates(11, 12);
                  break;
               case 13:
                  if (curChar == 32)
                     jjAddStates(13, 14);
                  break;
               case 40:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(42, 73);
                  break;
               case 44:
                  if (curChar == 32)
                     jjAddStates(15, 16);
                  break;
               case 46:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(48, 59);
                  break;
               case 50:
                  if (curChar == 32)
                     jjAddStates(17, 18);
                  break;
               case 78:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if ((0xfffffffe00000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 81:
                  if ((0x2400L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 82:
                  if (curChar == 13 && kind > 19)
                     kind = 19;
                  break;
               case 83:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 10 && kind > 19)
                     kind = 19;
                  break;
               case 85:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(0, 2);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(87);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar == 46)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(90);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(80);
                  else if (curChar == 64)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 1:
                  if (curChar != 64)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 114 && kind > 14)
                     kind = 14;
                  break;
               case 15:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 21:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 24:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 27:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 30:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 33:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 36:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 51:
                  if (curChar == 107 && kind > 15)
                     kind = 15;
                  break;
               case 52:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 57:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 61:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 72:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 75:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 120)
                     jjAddStates(19, 20);
                  break;
               case 79:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(80);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 91 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   87, 88, 89, 3, 34, 5, 31, 7, 28, 9, 25, 11, 22, 13, 19, 44, 
   70, 50, 55, 78, 79, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, 
"\101\144\141\160\164\151\166\145\40\155\165\164\145\170\40\163\160\151\156\72", 
"\101\144\141\160\164\151\166\145\40\155\165\164\145\170\40\142\154\157\143\153\72", "\123\160\151\156\40\154\157\143\153\40\163\160\151\156\72", 
"\124\150\162\145\141\144\40\154\157\143\153\40\163\160\151\156\72", "\40\145\166\145\156\164\163\40\151\156\40", 
"\40\163\145\143\157\156\144\163\40\50", "\40\145\166\145\156\164\163\57\163\145\143\51", null, "\45", "\174", null, 
null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffff9L, 
};
static final long[] jjtoSkip = {
   0x6L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[91];
static private final int[] jjstateSet = new int[182];
static protected char curChar;
/** Constructor. */
public FormatterTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public FormatterTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 91; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 9 && (0x200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 20)
   {
      jjmatchedKind = 20;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
