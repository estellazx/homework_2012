/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;
import java.util.*;

public class Parser implements ParserConstants {
                public static boolean staticScoping = true;
                public static boolean preload = false;
                public static boolean noEnvPrint = false;

    public static void main(String args[]) throws ParseException {
      Parser parser = new Parser (System.in);
                        Parser preloader = null;
                        ArrayList<ASub> preloadedSubs = null;

                        for (String arg : args) {
                                if (arg.equals("-d")) {
                                        staticScoping = false;
                                }
                                else if (arg.equals("-p")) {
                                        preload = true;

                                        try {
                                                System.out.println("Parsing Preload file...");
                                                preloader = new Parser (new FileInputStream("Preload"));
                                        }
                                        catch (FileNotFoundException e) {
                                                throw new RuntimeException("Cannot find Preload file. " + e);
                                        }
                                }
                                else if (arg.equals("-ne")) {
                                        noEnvPrint = true;
                                }
                                else if (arg.equals("-h")) {
                                        System.out.println("-d Dynamic scoping.");
                                        System.out.println("-p Preload functions to environment.");
                                        System.out.println("-ne No Environment printed out.");
                                        System.out.println("-h Help.");
                                        return;
                                }
                                else {
                                        throw new IllegalArgumentException("Unknown flag " + arg);
                                }
                        }

                        if (preload) {
                                // parse the function definitions and load them into environment
                                preloadedSubs = preloader.preloadParse();
                        }

      Node root = parser.parse();
                        new AstVisitor(root);
                        new InterpVisitor(root, preloadedSubs);
    }

  final public Expression parse() throws ParseException {
 Expression e;
    e = expression();
                                  {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ASub> preloadParse() throws ParseException {
Token t; Lambda l;
ArrayList<ASub> subs;
                  subs = new ArrayList<ASub>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      l = lambda();
                          subs.add(new ASub(t.image, l));
    }
                  {if (true) return subs;}
    throw new Error("Missing return statement in function");
  }

/**
 * (lambda (id) expr|l)
 */
  final public Lambda lambda() throws ParseException {
ArrayList<String> tlist = new ArrayList<String>();
Token t;
Lambda l;
Node exp;
boolean rec;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAMBDA:
      jj_consume_token(LAMBDA);
                                   rec = false;
      break;
    case LAMBDAREC:
      jj_consume_token(LAMBDAREC);
                                                                 rec = false;
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(ID);
                                                                                                     tlist.add(t.image);
    }
    jj_consume_token(RPAR);
    if (jj_2_1(2)) {
      exp = expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        exp = lambda();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAR);
                  for ( int i = tlist.size() - 1; i >=0; i-- )
                  {
                                exp = new Lambda(tlist.get(i), exp);
                        }

                        if (rec) {
                                ((Lambda)exp).setRec();
                        }
                        {if (true) return (Lambda)exp;}
    throw new Error("Missing return statement in function");
  }

/**
 *  (lambda() expression()|lambda())
 *| (let ((id expr|l)) expr1|l) --> ((lambda (id) expr1|l) expr|l)
 *| (expression() expression()|lambda()) // first expression must return Lambda
 * e.g.
 * ((lambda (x) (+ x 1)) 3)
 * (let ((f (lambda ..))) (f 3))
 * ((let ((y 1))
 		(lambda (x) (+ x y)))
  	3)
 */
  final public Application app() throws ParseException {
Token t;
ArrayList<Node> valueList = new ArrayList<Node>();
ArrayList<String> idList = new ArrayList<String>();
Node l, b = null, c;
    if (jj_2_6(2)) {
      jj_consume_token(LPAR);
      if (jj_2_2(2)) {
        l = lambda();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case INTEGER:
        case ID:
        case PRIME:
          l = expression();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case INTEGER:
        case ID:
        case PRIME:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        if (jj_2_3(2)) {
          b = expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
            b = lambda();
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
                                                                                                                                       valueList.add(b);
      }
      jj_consume_token(RPAR);
    } else if (jj_2_7(2)) {
      jj_consume_token(LPAR);
      jj_consume_token(LET);
      jj_consume_token(LPAR);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(LPAR);
        t = jj_consume_token(ID);
        if (jj_2_4(2)) {
          b = expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
            b = lambda();
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RPAR);
                idList.add(t.image); valueList.add( b );
      }
      jj_consume_token(RPAR);
      if (jj_2_5(2)) {
        c = expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
          c = lambda();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAR);
                  for ( int i = idList.size() - 1; i >=0; i-- )
                  {
                                c = new Lambda(idList.get(i), c);
                        }
                        l = c;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                  Node tempApp = l;
                  for ( int i = 0; i < valueList.size(); i++ )
                  {
                          tempApp = new Application(tempApp, valueList.get(i));
                        }
                        {if (true) return (Application)tempApp;}
    throw new Error("Missing return statement in function");
  }

  final public Application letrec() throws ParseException {
                Token f, n;
                Expression body, exp;
    jj_consume_token(LPAR);
    jj_consume_token(LETREC);
    jj_consume_token(LPAR);
    jj_consume_token(LPAR);
    f = jj_consume_token(ID);
    jj_consume_token(LPAR);
    jj_consume_token(LAMBDA);
    jj_consume_token(LPAR);
    n = jj_consume_token(ID);
    jj_consume_token(RPAR);
    body = expression();
    jj_consume_token(RPAR);
    jj_consume_token(RPAR);
    jj_consume_token(RPAR);
    exp = expression();
    jj_consume_token(RPAR);
                 Lambda leftLambda = new Lambda(f.image, exp);
                 Lambda rightLambda = new Lambda(n.image, body);
                 Application app = new Application(leftLambda, rightLambda);
                 app.setRec();
                 {if (true) return app;}
    throw new Error("Missing return statement in function");
  }

  final public If if0() throws ParseException {
                Expression cond, baseCase, recCase;
                boolean isZero;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF0:
      jj_consume_token(IF0);
                                isZero = true;
      break;
    case IFNULL:
      jj_consume_token(IFNULL);
                                                            isZero = false;
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    cond = expression();
    baseCase = expression();
    recCase = expression();
    jj_consume_token(RPAR);
                  {if (true) return new If(cond, baseCase, recCase, isZero);}
    throw new Error("Missing return statement in function");
  }

/**
 * (+ (expression())*)
 * expression must return int
 */
  final public Addition addition() throws ParseException {
List<Expression> l = new ArrayList<Expression>();
Expression e;
    jj_consume_token(LPAR);
    jj_consume_token(PLUS);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case INTEGER:
      case ID:
      case PRIME:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      e = expression();
                                                  l.add( e );
    }
    jj_consume_token(RPAR);
                  {if (true) return new Addition( l );}
    throw new Error("Missing return statement in function");
  }

/**
 * app | addition | num | id
 */
  final public Expression expression() throws ParseException {
Token t; Application a; Addition ad; Expression exp; If i;
ArrayList<Expression> list = new ArrayList<Expression>();
    if (jj_2_8(2)) {
      a = app();
                                        {if (true) return new Expression( a );}
    } else if (jj_2_9(2)) {
      a = letrec();
                                           {if (true) return new Expression( a );}
    } else if (jj_2_10(2)) {
      i = if0();
                                  {if (true) return new Expression( i );}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        ad = addition();
                           {if (true) return new Expression( ad );}
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                                {if (true) return new Expression( Integer.parseInt( t.image ) );}
        break;
      case ID:
        t = jj_consume_token(ID);
                     {if (true) return new Expression( String.valueOf( t.image ) );}
        break;
      case PRIME:
        jj_consume_token(PRIME);
        jj_consume_token(LPAR);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case INTEGER:
          case ID:
          case PRIME:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          exp = expression();
                                                list.add( exp );
        }
        jj_consume_token(RPAR);
                                                                              {if (true) return new Expression( list );}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3_5() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(LAMBDAREC)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(LET)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IFNULL)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(LETREC)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(PRIME)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(IF0)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0xc00,0x2000,0x40,0x23040,0x23040,0x40,0x40,0x40,0x40,0x18000,0x23040,0x23040,0x23040,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
